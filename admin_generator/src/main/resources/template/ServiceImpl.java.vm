package ${package}.${moduleName}.service.impl;

import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;
import ${mainPath}.common.utils.PageUtils;
import ${mainPath}.common.utils.Query;

import ${package}.${moduleName}.dao.${className}Dao;
import ${package}.${moduleName}.entity.${className}Entity;
import ${package}.${moduleName}.dto.${className}DTO;
import ${package}.${moduleName}.vo.${className}VO;
import ${package}.${moduleName}.service.${className}Service;
import ${package}.${moduleName}.conver.${className}Conver;

import java.io.Serializable;
import java.util.Collection;


@Service("${classname}Service")
public class ${className}ServiceImpl extends ServiceImpl<${className}Dao, ${className}Entity> implements ${className}Service {

    @Override
    public PageUtils<${className}VO> queryPage(${className}DTO ${classname}) {
        IPage<${className}Entity> page = baseMapper.selectPage(
                new Query<${className}Entity>(${classname}).getPage(),
                new QueryWrapper<${className}Entity>()
        );

        return PageUtils.<${className}VO>page(page).setList(${className}Conver.MAPPER.conver(page.getRecords()));
    }
    @Override
    public ${className}VO getById(${pk.attrType} ${pk.attrname}) {
        return ${className}Conver.MAPPER.conver(baseMapper.selectById(${pk.attrname}));
    }

    @Override
    public boolean save(${className}DTO ${classname}) {
        ${className}Entity ${classname}Entity = ${className}Conver.MAPPER.converDTO(${classname});
        return this.save(${classname}Entity);
    }

    @Override
    public boolean updateById(${className}DTO ${classname}) {
        ${className}Entity ${classname}Entity = ${className}Conver.MAPPER.converDTO(${classname});
        return this.updateById(${classname}Entity);
    }

    @Override
    public boolean removeById(Serializable id) {
        return super.removeById(id);
    }

    @Override
    public boolean removeByIds(Collection<? extends Serializable> ids) {
        return super.removeByIds(ids);
    }

}
